@using WWI.Warehouse.Audit.Client.CustomComponents
@using WWI.Warehouse.Audit.Client.Helpers
@inject NavigationManager NavigationManager
@inject HttpClient Http
@page "/"

<PageTitle>TEST</PageTitle>

<div>
    <Loader IsInitialDataLoadComplete=@IsInitialDataLoadComplete></Loader>
    <div>
        <div class="row form-group">
            <div class="row col-11" style="max-width: 630px">
                @* <div class="col-3">
                    <TelerikTextBox @bind-Value="@Warehouse" MaxLength=3 Width="100%" PlaceHolder="@Localizer["Warehouse"]" Class="placeholder-shown" />
                    </div>*@
               
                <div class="col-3">
                    <span class="input-group-text" @onclick="@Search">
                    </span>
                </div>
            </div>


        </div>
    </div>
    <div style="margin-top:20px;">



    </div>
</div>
<style>
    .input-group-text {
        border: none;
        padding: 0;
    }

    .placeholder-shown {
        text-overflow: ellipsis;
    }
</style>

@code {
    int PageSize = 20;
    int CurrentPage = 1;
    public string? Warehouse = "";
    public string? Aisle = "";
    public string? Rack = "";
    public string? Shelf = "";
    bool IsInitialDataLoadComplete { get; set; }
    List<int?> PageSizes => new List<int?> { 10, 20, 50, 100, 500 };
    List<ShelfModel> ShelfGridData { get; set; }
    int TotalItemCount { get; set; } = 0;


    private async Task SetGridData(int pageIndex, int pageSize)
    {
        this.IsInitialDataLoadComplete = false;
        var filter = new ShelfOverviewFilterModel((pageIndex - 1), pageSize, this.Warehouse, this.Aisle, this.Rack, this.Shelf);
        var url = QueryStringBuilder.GenerateUrlWithQueryString<ShelfOverviewFilterModel>("api/warehouse/get-overview", filter);

        var data = await Http.GetFromJsonAsync<ShelfOverviewModel>(url);
        ShelfGridData = data.ShelfModels;
        TotalItemCount = data.TotalItemCount;

        this.IsInitialDataLoadComplete = true;
    }

    private async Task Search()
    {
        this.CurrentPage = 1;
        await SetGridData(this.CurrentPage, this.PageSize);
    }
}

