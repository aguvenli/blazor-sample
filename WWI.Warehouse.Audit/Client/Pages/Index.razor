@using Telerik.Blazor
@using Telerik.Blazor.Components
@using WWI.Warehouse.Audit.Client.CustomComponents
@using WWI.Warehouse.Audit.Client.Helpers
@inject NavigationManager NavigationManager
@inject HttpClient Http
@page "/"

<PageTitle>TEST</PageTitle>

<div>
    <Loader IsInitialDataLoadComplete=@IsInitialDataLoadComplete></Loader>
    <div>
        <div class="row form-group">
            <div class="row col-11" style="max-width: 630px">
                @* <div class="col-3">
                    <TelerikTextBox @bind-Value="@Warehouse" MaxLength=3 Width="100%" PlaceHolder="@Localizer["Warehouse"]" Class="placeholder-shown" />
                    </div>*@
                <div class="col-3">
                    <TelerikTextBox @bind-Value="@Aisle" MaxLength=2 Width="100%" PlaceHolder="@Localizer["Aisle"]" Class="placeholder-shown" />
                </div>
                <div class="col-3">
                    <TelerikTextBox @bind-Value="@Rack" MaxLength=2 InputMode="numeric" Width="100%" PlaceHolder="@Localizer["Rack"]" Class="placeholder-shown" />
                </div>
                <div class="col-3">
                    <TelerikTextBox @bind-Value="@Shelf" MaxLength=2 InputMode="numeric" Width="100%" PlaceHolder="@Localizer["Shelf"]" Class="placeholder-shown" />
                </div>
                <div class="col-3">
                    <span class="input-group-text" @onclick="@Search">
                        <TelerikButton ImageUrl="images/svg/ios-search-strong-secondary.svg">Search</TelerikButton>
                    </span>
                </div>
            </div>


        </div>
    </div>
    <div style="margin-top:20px;">


        <TelerikGrid Data="@ShelfGridData"
                     TotalCount=@TotalItemCount
                     Pageable="true"
                     @bind-PageSize="@PageSize"
                     @bind-Page="@CurrentPage"
                     Sortable="true"
                     ScrollMode="@GridScrollMode.Scrollable"
                     Height="600px"
                     RowHeight=70
                     Class="custom-icons"
                     OnRowClick="@OnRowClickHandler"
                     OnRead="@OnReadHandler">
            <GridSettings>
                <GridPagerSettings InputType="@PagerInputType.Buttons" PageSizes="@PageSizes" ButtonCount="5" />
            </GridSettings>
            <GridColumns>
                <GridColumn Field=@nameof(ShelfModel.Warehouse) Title="@Localizer["Warehouse"]" />
                <GridColumn Field=@nameof(ShelfModel.Aisle) Title="@Localizer["Aisle"]" />
                <GridColumn Field=@nameof(ShelfModel.Rack) Title="@Localizer["Rack"]" />
                <GridColumn Field=@nameof(ShelfModel.Shelf) Title="@Localizer["Shelf"]" />
            </GridColumns>
        </TelerikGrid>
    </div>
</div>
<style>
    .input-group-text {
        border: none;
        padding: 0;
    }

    .placeholder-shown {
        text-overflow: ellipsis;
    }
</style>

@code {
    int PageSize = 20;
    int CurrentPage = 1;
    public string? Warehouse = "";
    public string? Aisle = "";
    public string? Rack = "";
    public string? Shelf = "";
    bool IsInitialDataLoadComplete { get; set; }
    List<int?> PageSizes => new List<int?> { 10, 20, 50, 100, 500 };
    List<ShelfModel> ShelfGridData { get; set; }
    int TotalItemCount { get; set; } = 0;

    protected async Task OnReadHandler(GridReadEventArgs args)
    {
        await SetGridData(args.Request.Page, args.Request.PageSize);
    }

    private async Task SetGridData(int pageIndex, int pageSize)
    {
        this.IsInitialDataLoadComplete = false;
        var filter = new ShelfOverviewFilterModel((pageIndex - 1), pageSize, this.Warehouse, this.Aisle, this.Rack, this.Shelf);
        var url = QueryStringBuilder.GenerateUrlWithQueryString<ShelfOverviewFilterModel>("api/warehouse/get-overview", filter);

        var data = await Http.GetFromJsonAsync<ShelfOverviewModel>(url);
        ShelfGridData = data.ShelfModels;
        TotalItemCount = data.TotalItemCount;

        this.IsInitialDataLoadComplete = true;
    }

    private async Task OnRowClickHandler(GridRowClickEventArgs args)
    {

        var item = args.Item as ShelfModel;
        NavigationManager.NavigateTo($"detail/{item.StorageShelfId}");
    }

    private async Task Search()
    {
        this.CurrentPage = 1;
        await SetGridData(this.CurrentPage, this.PageSize);
    }
}

